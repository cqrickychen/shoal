<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 #
 # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 #
 # Copyright 2010 Sun Microsystems, Inc. All rights reserved.
 #
 # The contents of this file are subject to the terms of either the GNU
 # General Public License Version 2 only ("GPL") or the Common Development
 # and Distribution License("CDDL") (collectively, the "License").  You
 # may not use this file except in compliance with the License. You can obtain
 # a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 # or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 # language governing permissions and limitations under the License.
 #
 # When distributing the software, include this License Header Notice in each
 # file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 # Sun designates this particular file as subject to the "Classpath" exception
 # as provided by Sun in the GPL Version 2 section of the License file that
 # accompanied this code.  If applicable, add the following below the License
 # Header, with the fields enclosed by brackets [] replaced by your own
 # identifying information: "Portions Copyrighted [year]
 # [name of copyright owner]"
 #
 # Contributor(s):
 #
 # If you wish your version of this file to be governed by only the CDDL or
 # only the GPL Version 2, indicate your decision by adding "[Contributor]
 # elects to include this software in this distribution under the [CDDL or GPL
 # Version 2] license."  If you don't indicate a single choice of license, a
 # recipient has the option to distribute your version of this file under
 # either the CDDL, the GPL Version 2 or to extend the choice of license to
 # its licensees as provided above.  However, if you add GPL Version 2 code
 # and therefore, elected the GPL Version 2 license, then the option applies
 # only if the new code is made subject to such option by the copyright
 # holder.
 #
 # author Stephen DiMilla
 -->

<project name="backing store tests" default="all" basedir=".">

    <!-- ========== Initialize Properties =================================== -->

    <property file="./build.properties"/>

    <target name="getgrizzlyjars">
        <property name="grizzlyframeworkjar" value="${grizzly-path}/grizzly-framework.jar" />
        <property name="grizzlyutilsjar" value="${grizzly-path}/grizzly-utils.jar" />
    </target>
    <target name="getshoalgmsjars">
        <xmlproperty prefix="shoalgmsapijar" file="${shoal-gms-api-path}/../pom.xml"/>
        <property name="shoalgmsapijar" value="${shoal-gms-api-path}/shoal-gms-api-${shoalgmsapijar.project.parent.version}.jar" />
        <xmlproperty prefix="shoalgmsimpljar" file="${shoal-gms-impl-path}/../pom.xml"/>
        <property name="shoalgmsimpljar" value="${shoal-gms-impl-path}/shoal-gms-impl-${shoalgmsimpljar.project.parent.version}.jar" />
        <property name="shoalgmstestsjar" value="${shoal-gms-tests-path}/shoal-gms-tests.jar" />

    </target>
    <target name="getshoalcachejars">
        <xmlproperty prefix="shoalcachejar" file="${shoal-cache-path}/../pom.xml"/>
        <property name="shoalcachejar" value="${shoal-cache-path}/shoal-cache-${shoalcachejar.project.parent.version}.jar" />
    </target>
    <target name="getbackingstorejars">
        <xmlproperty prefix="shoalbackingstorejar" file="${shoal-backing-store-path}/../pom.xml"/>
        <property name="shoalbackingstorejar" value="${shoal-backing-store-path}/shoal-backing-store-${shoalbackingstorejar.project.parent.version}.jar" />
    </target>
    <target name="gethaapijars">
        <xmlproperty prefix="haapijar" file="../../pom.xml"/>

        <echo message="Updating ha-api.jar from maven repository" />
        <!--<xmlproperty file="../pom.xml"/> -->
        <pathconvert property="hagroupid" description="Replace '.' with '/' and assign value to new property">
            <!-- when I figure out how to parse multivalues in pom.xml then I can use the line below -->
            <!-- <path path="${project.dependencies.dependency.groupId}"/> -->
            <path path="${haapigroupid}"/>

            <!--Pathconvert will try to add the root directory to the "path", so replace with empty string -->
            <map from="${basedir}" to="" />
            <filtermapper>
                <replacestring from="." to="${file.separator}"/>
            </filtermapper>
        </pathconvert>
        <property name="haapiversion" value="${haapijar.project.properties.ha.api.version}"/>
        <property name="mavenhaapijar" value="${maven.repository}${hagroupid}${file.separator}ha-api${file.separator}${haapiversion}${file.separator}ha-api-${haapiversion}.jar"/>
        <echo message="mavenhaapijar=${mavenhaapijar}"/>
        <mkdir dir="${ha-api-path}"/>
        <delete file="${ha-api-path}${file.separator}ha-api.jar"/>
        <copy file="${mavenhaapijar}" tofile="${ha-api-path}${file.separator}ha-api.jar"/>
        <property name="haapijar" value="${ha-api-path}/ha-api.jar" />
    </target>

    <!-- The JAR locations can be overridden by editing the build.properties file and
         specifying in there the locations of the jars
    -->
    <target name="getalljars" depends="getgrizzlyjars,getshoalgmsjars,getshoalcachejars,getbackingstorejars,gethaapijars"
            description="Get all the jars required to run this test.">
        <fail message="A required jar was not found, please verify jar locations and try again">
            <condition>
                <not>
                    <and>
                        <available file="${grizzlyframeworkjar}"/>
                        <available file="${grizzlyutilsjar}"/>
                        <available file="${shoalgmsapijar}"/>
                        <available file="${shoalgmsimpljar}"/>
                        <available file="${shoalgmstestsjar}"/>
                        <available file="${shoalcachejar}"/>
                        <available file="${shoalbackingstorejar}"/>
                        <available file="${haapijar}"/>
                    </and>
                </not>
            </condition>
            ${grizzlyframeworkjar}
            ${grizzlyutilsjar}
            ${shoalgmsapijar}
            ${shoalgmsimpljar}
            ${shoalgmstestsjar}
            ${shoalcachejar}
            ${shoalbackingstorejar}
            ${haapijar}
        </fail>

        <path id="compile.classpath">
            <pathelement location="${grizzlyframeworkjar}"/>
            <pathelement location="${grizzlyutilsjar}"/>
            <pathelement location="${shoalgmsapijar}"/>
            <pathelement location="${shoalgmsimpljar}"/>
            <pathelement location="${shoalgmstestsjar}"/>
            <pathelement location="${shoalcachejar}"/>
            <pathelement location="${shoalbackingstorejar}"/>
            <pathelement location="${haapijar}"/>
        </path>

    </target>

    <!-- all -->
    <target name="all" depends="clean, compile, assemble"
            description="Build entire ${component.name}">
    </target>

    <!-- build -->
    <target name="build" depends="compile, assemble"
            description="Build entire ${component.name}">
    </target>

    <!-- init. Initialization involves creating publishing directories and
         OS specific targets. -->
    <target name="init" depends="getalljars" description="${component.name} initialization">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>


    <!-- compile: compile the sources -->
    <target name="compile" depends="init"
            description="Compile ${component.name} sources">

        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               source="${javac.source}"
               target="${javac.source}"
               deprecation="${javac.deprecation}"
               failonerror="true"
               includes="**/*.java"
               >
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>

    </target>

    <target name="assemble" description="create ${tests.jar}" >
        <!-- create test jar -->
        <jar jarfile="${shoalbackingstoretestjar}" update="yes">
            <fileset dir="${classes.dir}" includes="**/*.class"/>
        </jar>
        <jar jarfile="${shoalbackingstoretestjar}" update="yes">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </jar>
    </target>



    <!-- clean -->
    <target name="clean">
        <delete dir="${classes.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${ha-api-path}"/>
    </target>

</project>
